{
	"info": {
		"_postman_id": "3b693e7c-4d99-434d-b482-00e223953ee7",
		"name": "GOREST Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34374736"
	},
	"item": [
		{
			"name": "Get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, name, email, gender, and status\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(user) {\r",
							"      pm.expect(user.id).to.exist;\r",
							"      pm.expect(user.name).to.exist;\r",
							"      pm.expect(user.email).to.exist;\r",
							"      pm.expect(user.gender).to.exist;\r",
							"      pm.expect(user.status).to.exist;\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.email).to.match(/^.+@.+\\..+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.gender).to.be.oneOf(['male', 'female']);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is either active or inactive\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.status).to.be.oneOf(['active', 'inactive']);\r",
							"    });\r",
							"});\r",
							"\r",
							"var randomEmail = \"user\" + Math.floor(Math.random() * 1000) + \"@example.com\";\r",
							"pm.globals.set(\"randomEmail\", randomEmail);\r",
							"var randomName = \"User\" + Math.floor(Math.random() * 1000);\r",
							"pm.collectionVariables.set(\"randomName\", randomName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, name, email, gender, and status\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('id');\r",
							"  pm.expect(responseData).to.have.property('name');\r",
							"  pm.expect(responseData).to.have.property('email');\r",
							"  pm.expect(responseData).to.have.property('gender');\r",
							"  pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.email).to.be.a('string');\r",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.gender).to.exist.and.to.satisfy((gender) => {\r",
							"        return gender === \"male\" || gender === \"female\";\r",
							"    }, \"Gender should be either 'male' or 'female'\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status should be either active or inactive\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('status').that.is.oneOf(['active', 'inactive']);\r",
							"});\r",
							"var userId = pm.response.json().id;\r",
							"pm.collectionVariables.set(\"userId\", userId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"test\",\r\n  \"gender\": \"male\",\r\n  \"status\": \"active\",\r\n  \"email\": \"{{randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}users",
					"host": [
						"{{url}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch user name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('email', 'id', 'name', 'gender', 'status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.gender).to.satisfy((gender) => {\r",
							"        return gender === \"male\" || gender === \"female\";\r",
							"    }, \"Gender should be either 'male' or 'female'\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{randomName}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put user email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - email, id, name, gender, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is a valid email format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.email).to.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.id).to.be.a('number');\r",
							"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"email\": \"{{randomEmail}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty for a DELETE request\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "randomName",
			"value": ""
		}
	]
}